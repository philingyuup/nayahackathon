{"version":3,"sources":["Components/URLImage/urlimage.js","Components/ImageBar/imagebar.js","Components/TextBar/textbar.js","Components/Text/textimage.js","Components/Canvas/canvas.js","App.js","serviceWorker.js","index.js"],"names":["URLImage","image","id","isSelected","itemRef","onSelect","transformRef","useImage","src","img","useState","height","setHeight","isDragging","setIsDragging","ref","x","y","rotation","width","draggable","shadowEnabled","shadowColor","shadowBlur","shadowOpacity","shadowOffsetX","shadowOffsetY","scaleX","scaleY","imageSmoothingEnabled","onDragStart","e","onDragEnd","onClick","current","nodes","getLayer","batchDraw","resizeEnabled","keepRatio","boundBoxFunc","oldImage","newImage","Math","abs","ImageBar","imageRef","imageSrc","style","overflowX","whiteSpace","marginLeft","map","index","key","alt","target","TextBar","textRef","marginTop","TextImage","text","fontSize","Canvas","useRef","dragRef","stageRef","layerRef","setNodes","selectedNode","setSelectedNode","margin","textAlign","onDrop","setPointersPositions","prevNodes","getPointerPosition","innerText","onDragOver","preventDefault","window","innerWidth","innerHeight","border","getStage","draw","node","display","alignItems","flexDirection","justifyContent","className","dataURL","toDataURL","pixelRatio","link","document","createElement","download","href","body","appendChild","click","removeChild","weightInformation","getChildren","undefined","attrs","items","weightedObject","weight","isNaN","console","log","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bb03c3e8.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { Image, Transformer } from 'react-konva'\r\nimport useImage from 'use-image';\r\n\r\nexport const URLImage = ({ image, isSelected, id, onSelect, itemRef, transformRef }) => {\r\n\r\n    const [img] = useImage(image.src);\r\n    //used for setting dragEvent transforms\r\n    const [height, setHeight] = useState(100)\r\n    const [isDragging, setIsDragging] = useState(false)\r\n\r\n    // const determineWidth = () => {\r\n    //     return img ? img.width * (150 / img.height) : 0\r\n    // }\r\n\r\n    \r\n\r\n    // useEffect(() => {\r\n    //     console.log(transformRef.current)\r\n    //     if(isSelected) {\r\n    //         //sets the transformer to the node\r\n    //         transformRef.current.nodes([itemRef])\r\n    //         transformRef.current.getLayer().batchDraw()\r\n    //     }\r\n    // }, [isSelected])\r\n\r\n\r\n    const dragStartHandler = (e) => {\r\n        setIsDragging(!isDragging)\r\n    }\r\n\r\n    const dragEndHandler = (e) => {\r\n        setIsDragging(false)\r\n    }\r\n\r\n    //attached transformer to the last clicked itemRef\r\n    const onClickHandler = (e) => {\r\n        transformRef.current.nodes([itemRef.current])\r\n        transformRef.current.getLayer().batchDraw()\r\n    }\r\n\r\n    //constraints for image sizes\r\n    const boundBoxFunctionHandler = (oldImage, newImage) => {\r\n        if (Math.abs(newImage.height) > 180 || Math.abs(newImage.height) < 100) {\r\n            return oldImage\r\n        }\r\n        setHeight(newImage.height)\r\n        return newImage\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <Image\r\n                id={id}\r\n                image={img}\r\n                ref={itemRef}\r\n                x={image.x}\r\n                y={image.y}\r\n                rotation={0}\r\n                height={height}\r\n                width={img ? img.width * (150 / img.height) : 0}\r\n                draggable\r\n                shadowEnabled='true'\r\n                shadowColor='black'\r\n                shadowBlur={8}\r\n                shadowOpacity={0.6}\r\n                shadowOffsetX={isDragging ? 4 : 3}\r\n                shadowOffsetY={isDragging ? 4 : 3}\r\n                scaleX={isDragging ? 1.01 : 1}\r\n                scaleY={isDragging? 1.01 : 1}\r\n                imageSmoothingEnabled='true'\r\n                onDragStart={dragStartHandler}\r\n                onDragEnd={dragEndHandler}\r\n                onClick={onClickHandler}\r\n            />\r\n            <Transformer\r\n                    ref={transformRef}\r\n                    resizeEnabled={true}\r\n                    keepRatio={true}\r\n                    boundBoxFunc={boundBoxFunctionHandler}\r\n            />\r\n\r\n        </>\r\n    )\r\n}","import React, { useState } from 'react'\r\n\r\nexport const ImageBar = ({ imageRef }) => {\r\n\r\n    const [imageSrc, setImageSrc] = useState([\r\n        './images/carerraTable.jpg',\r\n        './images/carerraTable2.png',\r\n        './images/carerraTable3.jpg',\r\n        './images/Carerra/carerra4.jpg',\r\n        './images/Carerra/carerra5.jpg',\r\n        './images/Carerra/carerra6.jpg',\r\n        './images/ModularStorage/storage1.jpg',\r\n        './images/ModularStorage/storage2.jpg',\r\n        './images/ModularStorage/storage3.jpg',\r\n        './images/ModularStorage/storage4.jpg',\r\n        './images/ModularStorage/storage5.jpg',\r\n        './images/ModularStorage/storage6.jpg',\r\n        './images/ModularStorage/storage7.jpg',\r\n        './images/ModularStorage/storage8.jpg',\r\n        './images/ModularStorage/storage9.png',\r\n        './images/ModularStorage/storage10.jpg',\r\n        './images/TVStand/tvstand.jpg',\r\n        './images/TVStand/tvstand1.jpg',\r\n        './images/TVStand/tvstand2.jpeg',\r\n        './images/TVStand/tvstand3.jpeg',\r\n        './images/TVStand/tvstand4.jpeg',\r\n    ])\r\n\r\n\r\n    return (\r\n        <>\r\n            <div style={{ width: '95vw', height: 'auto', overflowX: 'scroll', whiteSpace: 'nowrap', marginLeft: '8px'}}>\r\n                { imageSrc.map((src, index) =>\r\n                <img\r\n                    key={index}\r\n                    id={`image${index}`}\r\n                    alt=\"pic\"\r\n                    style={{ marginLeft: '10px'}}\r\n                    src={src}\r\n                    height='80'\r\n                    draggable=\"true\"\r\n                    onDragStart={e => {\r\n                        imageRef.current = e.target\r\n                    }}\r\n                />\r\n                ) }\r\n            </div>\r\n        </>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport const TextBar = ({ textRef }) => {\r\n    // const [textSrc, setTextSrc] = useState()\r\n\r\n    const textSrc = [\r\n        'Casual',\r\n        'Bold',\r\n        'Colorful',\r\n        'Airy',\r\n        'Electic',\r\n        'Masculine',\r\n        'Retro',\r\n        'Ornate',\r\n        'Feminine',\r\n        'Experimental',\r\n        'Chic',\r\n        'Sleek',\r\n        'Elegant',\r\n        'Modern',\r\n        'Bohemian',\r\n        'Furturistic',\r\n        'Minimalistic',\r\n        'Brutalist',\r\n        'Cute',\r\n        'Rustic',\r\n        'Classic',\r\n        'Cubic',\r\n        'Angular',\r\n        'Circular',\r\n        'Edgy',\r\n        'Organic',\r\n        'Light',\r\n        'Rectilinear',\r\n        'Round',\r\n        'Slim',\r\n        'Modular',\r\n        'Geometric',\r\n        'Curvilinear',\r\n        'African',\r\n        'Japanese',\r\n        'Scandinavian',\r\n        'Italian',\r\n        'Spanish',\r\n        'Arabic'\r\n    ]\r\n\r\n    return (\r\n        <>\r\n            <div style={{ width: '95vw', height: 'auto', marginTop: '20px', overflowX: 'scroll', marginLeft: '8px'}}>\r\n                {textSrc.map((src, index) =>\r\n                    <span\r\n                        key={index}\r\n                        id={`text${index}`}\r\n                        style={{marginLeft: '8px', }}\r\n                        draggable=\"true\"\r\n                        onDragStart={e => {\r\n                            textRef.current= e.target\r\n                        }}\r\n                    >\r\n                        {src}\r\n                    </span>\r\n                )}\r\n            </div>\r\n        </>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { Text } from 'react-konva'\r\n\r\nexport const TextImage = ({ text, id }) => {\r\n    const [isDragging, setIsDragging] = useState(false)    \r\n\r\n    const dragStartHandler = (e) => {\r\n        setIsDragging(!isDragging)\r\n    }\r\n\r\n    const dragEndHandler = (e) => {\r\n        setIsDragging(false)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Text \r\n                text={text.text}\r\n                id={id}\r\n                x={text.x}\r\n                y={text.y}\r\n                fontSize={isDragging ? 31 : 30 }\r\n                draggable\r\n                shadowEnabled='true'\r\n                shadowColor='black'\r\n                shadowBlur={8}\r\n                shadowOpacity={0.6}\r\n                shadowOffsetX={isDragging ? 4 : 3}\r\n                shadowOffsetY={isDragging ? 4 : 3}\r\n                onDragStart={dragStartHandler}\r\n                onDragEnd={dragEndHandler}\r\n            />\r\n        </>\r\n    )\r\n}","import React, { useRef, useState } from 'react';\r\nimport { Stage, Layer} from 'react-konva';\r\nimport { URLImage } from '../URLImage/urlimage'\r\nimport { ImageBar } from '../ImageBar/imagebar'\r\nimport { TextBar } from '../TextBar/textbar'\r\nimport { TextImage } from '../Text/textimage'\r\n\r\nexport const Canvas = () => {\r\n\r\n    const transformRef = useRef()\r\n    const itemRef = useRef()\r\n    const dragRef = useRef();\r\n    const stageRef = useRef();\r\n    const layerRef = useRef();\r\n    const [nodes, setNodes] = useState([]);\r\n    const [selectedNode, setSelectedNode] = useState(null)\r\n\r\n    const onDropHandler = (e) => {\r\n        // register event position\r\n        stageRef.current.setPointersPositions(e);\r\n        // add image\r\n        setNodes(prevNodes =>\r\n            [\r\n                ...prevNodes,\r\n                {\r\n                    id: dragRef.current.id,\r\n                    ...stageRef.current.getPointerPosition(),\r\n                    src: dragRef.current.src,\r\n                    text: dragRef.current.innerText\r\n                }\r\n            ])\r\n    }\r\n\r\n    //deselects the transformer\r\n    const onDeselectHandler = (e) =>{\r\n        const clickedEmpty = e.target === e.target.getStage()\r\n        if (clickedEmpty) {\r\n            transformRef.current.nodes([])\r\n            transformRef.current.getLayer().draw()\r\n        }\r\n    }\r\n\r\n    const downloadClickHandler = () => {\r\n        const dataURL = stageRef.current.toDataURL({pixelRatio: 2})\r\n        var link = document.createElement('a');\r\n        link.download = 'designboard.png';\r\n        link.href = dataURL;\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        document.body.removeChild(link);\r\n    }\r\n\r\n    const checkWeightHandler = () => {\r\n        const layerCollection = layerRef.current.getChildren((node) => node.attrs.id !== undefined)\r\n        const weightInformation = layerCollection.map((items) => {\r\n            const weightedObject = {}\r\n            weightedObject.id = items.attrs.id\r\n            weightedObject.weight = ((items.attrs.height - 100) / 4) + 1\r\n            if (isNaN(weightedObject.weight))\r\n                weightedObject.weight = 1\r\n            return weightedObject\r\n        })\r\n        console.log(weightInformation)\r\n    }\r\n\r\n\r\n    return (\r\n        <div style={{overflowX: 'hidden'}}>\r\n            <div >\r\n                <div style={{ margin: '20px auto', textAlign: 'center', fontSize: '20px'}}> \r\n                    Images and Themes\r\n                </div>\r\n                <ImageBar imageRef={dragRef}/>\r\n                <TextBar textRef={dragRef} />\r\n            </div>\r\n            <div\r\n                onDrop={onDropHandler}\r\n                onDragOver={e => e.preventDefault()}\r\n            >\r\n                <div style={{margin: '20px auto', textAlign: 'center', fontSize: '40px'}} > \r\n                    Design Board \r\n                </div>\r\n                <div style={{ margin: '20px 30%', textAlign: 'center', fontSize: '.8rem' }}> \r\n                    <i>If you resonate strongly with a certain image, make it larger to stand out more </i>\r\n                </div>\r\n                <Stage\r\n                    width={window.innerWidth * 0.95}\r\n                    height={window.innerHeight * 0.65}\r\n                    style={{ border: '1px solid grey',  margin: '20px 20px'}}\r\n                    ref={stageRef}\r\n                    onClick={onDeselectHandler}\r\n                >\r\n                    <Layer ref={layerRef}>\r\n                        {nodes.map((node, index) => {\r\n                            return node.src ? \r\n                            <URLImage key={index} id={node.id} itemRef={itemRef} transformRef={transformRef} image={node} isSelected={node.id === selectedNode} /> \r\n                            : \r\n                            <TextImage key={index} id={node.id} text={node} isSelected={node.id === selectedNode} onSelect={() => setSelectedNode(node.id)} />\r\n                        })}\r\n                    </Layer>\r\n                </Stage>\r\n            </div>\r\n            <div style={{ margin: '10px 30%', textAlign: 'center', fontSize: '.8rem'}}>\r\n                <i>The board at the moment is a little buggy but the core features work. There is currently no delete or undo so any issues would require a refresh which clears the board (yes, that sucks. I know). Just follow the tips below:</i>\r\n                <p>1. Place image in it's proper location first and <i>then</i> adjust size (click image then drag). There is currently an issue where the width doesn't maintain aspect ratio when dragging <i>after</i> resizing. There is constraints on the max and min size. Try to use the corner adjuster for maintaining aspect ratio. </p>\r\n                <p>2. Click an empty part of the board to deselect adjuster (this is VERY IMPORTANT. The adjustor + image select is currently not working as intended, only the most RECENT placed image can be adjusted).</p>\r\n                <p>3. If you forgot to deselect the adjuster (by clicking on an empty part of the board), now's a good time to refresh the page as the adjuster border will show up in your finalized downloaded image. </p>\r\n                <p>4. <i>Pro Tip:</i> Lign up the image corner to and use the opposite corner to resize to maintain aspect ratio</p>\r\n                <p>5. Words currently can not be adjusted. However they can be overlayed on top of images </p>\r\n                <p>6. Check Weights button currently console logs an array of items in your board and their respective weights </p>\r\n            </div>\r\n            <div style={{margin: '20px 20%', display: 'flex', alignItems: 'center', flexDirection: 'row', justifyContent: 'space-evenly'}}>\r\n                <button className='button' onClick={downloadClickHandler} target='_blank'> Download Image </button>\r\n                <button className='button' onClick={checkWeightHandler} > Check Weights </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};","import React from 'react';\nimport { Canvas } from './Components/Canvas/canvas'\nimport './App.css';\n\nfunction App() {\n  return (\n    <Canvas>\n\n    </Canvas>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}